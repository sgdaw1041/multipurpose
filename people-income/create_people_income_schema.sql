create schema if not exists data_query;

set search_path to data_query;

drop table if exists people_income cascade;

CREATE table people_income
(
   id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
   age integer,
   workclass varchar,
   fnlwgt integer,
   education varchar,
   education_num integer,
   marital_status varchar,
   occupation varchar,
   relationship varchar,
   sex varchar,
   capital_gain integer,
   capital_loss integer,
   hours_per_week integer,
   native_country varchar,
   income varchar
);

comment on table people_income is 'table used to  mirror python analysis using db queries';


--  create utility functions;  execute dynamically as query
CREATE OR REPLACE FUNCTION public.get_count( TEXT, TEXT )
RETURNS  TABLE(t_column_name  TEXT, t_count BIGINT )
LANGUAGE plpgsql
AS $BODY$
DECLARE
p_schema        TEXT := $1;
p_tabname       TEXT := $2;
v_sql_statement TEXT;

BEGIN

SELECT STRING_AGG( 'SELECT ''' 
       || column_name 
       || ''',' 
       || ' count(' 
       || column_name 
       || ')  FROM ' 
       || table_schema 
       || '.' 
       || table_name
       || ' WHERE ' 
       || column_name 
       || ' IS NOT NULL '  
         ,' UNION ALL ' ) INTO v_sql_statement
FROM   information_schema.columns 
WHERE  table_schema   = p_schema 
       AND table_name = p_tabname; 

    IF v_sql_statement IS NOT NULL THEN
     RETURN QUERY EXECUTE   v_sql_statement;
    END IF;
END
$BODY$;


create or replace function public.get_grpstats(text, text, text, text) 
returns  TABLE(t_column_name  TEXT, t_count BIGINT, t_mean real, t_std real, t_min BIGINT, t_p25 REAL, t_p50 REAL, t_p75 REAL, t_max BIGINT )
as
$$
declare
   _schema    text := $1;
   _tabname   text := $2;
   _grpcol    text := $3;
   _statcol   text := $4;
   grpquery   text;
begin

grpquery :=
 'with w_view as (select distinct '||_grpcol||' from '||_schema||'.'||_tabname||' ) 
    select p.'||_grpcol||'::text, count('||_statcol||')::bigint as _count
       , avg('||_statcol||')::real as _mean, stddev_samp('||_statcol||')::real as _stddev      
       , min('||_statcol||')::bigint _min
       , percentile_cont(0.25) within group (order by '||_statcol||' asc)::real as _pct_25
       , percentile_cont(0.50) within group (order by '||_statcol||' asc)::real as _pct_50
       , percentile_cont(0.75) within group (order by '||_statcol||' asc)::real as _pct_75        
       , max('||_statcol||')::bigint _max 
    from w_view, '||_schema||'.'||_tabname||'   p 
    where  w_view.'||_grpcol||'=p.'||_grpcol|| ' 
    group by p.'||_grpcol|| ' 
    order by 1 asc; '
;
--        RAISE NOTICE 'QUERY: (%)', grpquery;     
        
        RETURN QUERY EXECUTE grpquery;

--        RAISE NOTICE 'QUERY EXECUTED SUCCESSFULLY';   
        EXCEPTION
            WHEN OTHERS
            THEN
                RAISE NOTICE 'ERROR WHILE EXECUTING THE QUERY: % %', SQLSTATE, SQLERRM;
end;
$$ language plpgsql;